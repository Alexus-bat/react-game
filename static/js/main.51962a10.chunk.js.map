{"version":3,"sources":["types/index.ts","constants/index.ts","components/App/AuthPage.tsx","hooks/http.hook.tsx","components/NumberDisplay/NumberDisplay.tsx","utils/index.ts","components/Button/Button.tsx","components/App/Game.tsx","components/App/ScorePage.tsx","components/App/App.tsx","components/App/useRoutes.tsx","index.tsx"],"names":["CellValue","CellState","Face","GAME_CONFIG","easy","MAX_ROWS","MAX_COLS","NO_OF_BOMBS","medium","hard","AuthPage","useState","loading","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","json","data","ok","Error","message","clearError","useHttp","email","password","form","setForm","changeHandler","event","target","name","value","registerHandler","console","log","className","placeholder","id","type","autoComplete","onChange","disabled","onClick","NumberDisplay","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","leftCell","rightCell","bottomLeftCell","bottomCell","bottomRightCell","generateCells","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","visible","flagged","newCells","slice","Button","onContext","red","onContextMenu","role","aria-label","Game","config","setCells","smile","face","setFace","time","setTime","live","setLive","bombCounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","handleMouseDown","oh","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","isABomb","includes","showAllBombs","safeOpenCellsExists","handleCellContext","e","preventDefault","currentCells","style","gridTemplateColumns","gridTemplateRows","ScorePage","App","routes","path","exact","to","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51962a10.chunk.js","sourcesContent":["export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb\r\n}\r\n\r\nexport enum CellState {\r\n    open,\r\n    visible,\r\n    flagged\r\n}\r\n\r\nexport type Cell = {value: CellValue, state: CellState, red?: boolean}\r\n\r\nexport enum Face {\r\n    smile = \"😁\",\r\n    oh = \"😮\",\r\n    lost = \"😵\",\r\n    won = \"😎\"\r\n}\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n\r\nexport const GAME_CONFIG = {\r\n    easy: {\r\n        MAX_ROWS: 9,\r\n        MAX_COLS: 9,\r\n        NO_OF_BOMBS: 10\r\n    },\r\n    medium: {\r\n        MAX_ROWS: 16,\r\n        MAX_COLS: 16,\r\n        NO_OF_BOMBS: 40\r\n    },\r\n    hard: {\r\n        MAX_ROWS: 16,\r\n        MAX_COLS: 30,\r\n        NO_OF_BOMBS: 99\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport './AuthPage.scss';\r\n\r\ntype Form = {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport const AuthPage: React.FC = () => {\r\n    const {loading, request} = useHttp();\r\n    const [form, setForm] = useState<Form>({\r\n        email: '', password: ''\r\n    });\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setForm({...form, [event.target.name]: event.target.value})\r\n    }\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n            console.log('Data', data)\r\n        } catch(e) {}\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n                <h1>Сапёр</h1>\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <span className=\"card-content__title\">Авторизация</span>\r\n                        <div>\r\n                            <div className=\"input-field\">\r\n                                <input \r\n                                    placeholder=\"Введите email\"\r\n                                    id=\"email\"\r\n                                    type=\"text\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"off\"\r\n                                    onChange={changeHandler}\r\n                                />\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input \r\n                                    placeholder=\"Введите пароль\"\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    onChange={changeHandler}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <button \r\n                            className=\"btn\"\r\n                            disabled={loading}>\r\n                                Войти\r\n                        </button>\r\n                        <button \r\n                            className=\"btn\" \r\n                            onClick={registerHandler}\r\n                            disabled={loading}>\r\n                                Регистрация\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(url, {\r\n                method, body, headers\r\n            })\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = (): void => setError(null);\r\n\r\n    return { loading, request, clearError }\r\n}\r\n","import React from 'react';\r\nimport './NumberDisplay.scss';\r\n\r\ninterface NumberDisplayProps {\r\n    value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n    return <div className=\"NumberDisplay\">\r\n        {value < 0 ? `-${Math.abs(value).toString().padStart(2, '0')}` : value.toString().padStart(3, '0')}\r\n    </div>\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import {Cell, CellValue, CellState} from '../types/index';\r\n\r\nconst grabAllAdjacentCells = (cells: Cell[][], rowParam: number, colParam: number, MAX_COLS: number, MAX_ROWS: number): {\r\n    topLeftCell: Cell | null,\r\n    topCell: Cell | null,\r\n    topRightCell: Cell | null,\r\n    leftCell: Cell | null,\r\n    rightCell: Cell | null,\r\n    bottomLeftCell: Cell | null,\r\n    bottomCell: Cell | null,\r\n    bottomRightCell: Cell | null\r\n} => {\r\n    const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n    const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n    const topRightCell = rowParam > 0 && colParam < MAX_COLS - 1 ? cells[rowParam - 1][colParam + 1] : null;\r\n    const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n    const rightCell = colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n    const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0 ? cells[rowParam + 1][colParam - 1] : null;\r\n    const bottomCell = rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n    const bottomRightCell = rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1 ? cells[rowParam + 1][colParam + 1] : null;\r\n\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    }\r\n}\r\n\r\ntype configProp = {\r\n    MAX_ROWS: number;\r\n    MAX_COLS: number;\r\n    NO_OF_BOMBS: number;\r\n}\r\n\r\nexport const generateCells = ({MAX_COLS, MAX_ROWS, NO_OF_BOMBS}: configProp): Cell[][] => {\r\n    let cells: Cell[][] = [];\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.open\r\n            })\r\n        }\r\n    }\r\n\r\n    // randomly put 10 bombs\r\n    let bombsPlaced = 0;\r\n    while (bombsPlaced < NO_OF_BOMBS) {\r\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n\r\n        const currentCell = cells[randomRow][randomCol];\r\n        if (currentCell.value !== CellValue.bomb) {\r\n        cells = cells.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) => {\r\n            if (randomRow === rowIndex && randomCol === colIndex) {\r\n                return {\r\n                ...cell,\r\n                value: CellValue.bomb\r\n                };\r\n            }\r\n\r\n            return cell;\r\n            })\r\n        );\r\n        bombsPlaced++;\r\n        }\r\n    }\r\n\r\n    // calculate the numbers for each cell\r\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n            const currentCell = cells[rowIndex][colIndex];\r\n            if (currentCell.value === CellValue.bomb) {\r\n                continue;\r\n            }\r\n\r\n            let numberOfBombs = 0;\r\n            const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowIndex, colIndex, MAX_COLS, MAX_ROWS);\r\n\r\n            if (topLeftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topRightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (leftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (rightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomLeftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomRightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n\r\n            if (numberOfBombs > 0) {\r\n                cells[rowIndex][colIndex] = {\r\n                    ...currentCell,\r\n                    value: numberOfBombs\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return cells;\r\n}\r\n\r\nexport const openMultipleCells = (cells: Cell[][], rowParam: number, colParam: number, MAX_COLS: number, MAX_ROWS: number): Cell[][] => {\r\n    const currentCell = cells[rowParam][colParam];\r\n    \r\n    if (currentCell.state === CellState.visible || currentCell.state === CellState.flagged) {\r\n        return cells;\r\n    }\r\n    \r\n    let newCells = cells.slice();\r\n\r\n    newCells[rowParam][colParam].state = CellState.visible;\r\n    \r\n    const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowParam, colParam, MAX_COLS, MAX_ROWS);\r\n\r\n    if (topLeftCell?.state === CellState.open && topLeftCell.value !== CellValue.bomb) {\r\n        if (topLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n        if (topCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (topRightCell?.state === CellState.open && topRightCell.value !== CellValue.bomb) {\r\n        if (topRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n        if (leftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (rightCell?.state === CellState.open && rightCell.value !== CellValue.bomb) {\r\n        if (rightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (bottomLeftCell?.state === CellState.open && bottomLeftCell.value !== CellValue.bomb) {\r\n        if (bottomLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (bottomCell?.state === CellState.open && bottomCell.value !== CellValue.bomb) {\r\n        if (bottomCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam].state = CellState.visible;\r\n        }\r\n    }    \r\n\r\n    if (bottomRightCell?.state === CellState.open && bottomRightCell.value !== CellValue.bomb) {\r\n        if (bottomRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    return newCells;\r\n}\r\n","import React from 'react';\r\nimport {CellState, CellValue} from '../../types/index';\r\n\r\nimport './Button.scss';\r\n\r\ninterface ButtonProps {\r\n    onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    red?: boolean;\r\n    row: number;\r\n    col: number;\r\n    state: CellState;\r\n    value: CellValue;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ row, col, onContext, onClick, state, value, red }) => {\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state === CellState.visible) {\r\n            if (value === CellValue.bomb) {\r\n                return (\r\n                    <span role=\"img\" aria-label=\"bomb\">\r\n                        💣\r\n                    </span>\r\n                )\r\n            } else if (value === CellValue.none) {\r\n                return null;\r\n            }\r\n\r\n            return value;\r\n        } else if (state === CellState.flagged) {\r\n            return (\r\n                <span role=\"img\" aria-label=\"flag\">\r\n                    🚩\r\n                </span>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`Button ${state === CellState.visible ? \"visible\" : \"\"} value-${value} ${red ? \"red\" : \"\"}`}\r\n            onClick={onClick(row, col)}\r\n            onContextMenu={onContext(row, col)}>\r\n            {renderContent()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\r\nimport {generateCells, openMultipleCells} from '../../utils/index'\r\nimport Button from '../Button/Button';\r\nimport {Cell, CellState, CellValue, Face} from '../../types/index';\r\n\r\nimport './App.scss';\r\n\r\ninterface GameConfigProps {\r\n    config: {\r\n        MAX_ROWS: number;\r\n        MAX_COLS: number;\r\n        NO_OF_BOMBS: number;\r\n    }\r\n}\r\n\r\nconst Game: React.FC<GameConfigProps> = ({config}) => {\r\n    const {MAX_COLS, MAX_ROWS, NO_OF_BOMBS} = config;\r\n    const [cells, setCells] = useState<Cell[][]>(generateCells(config));\r\n    const [face, setFace] = useState<Face>(Face.smile);\r\n    const [time, setTime] = useState<number>(0);\r\n    const [live, setLive] = useState<boolean>(false);\r\n    const [bombCounter, setBombCounter] = useState<number>(NO_OF_BOMBS);\r\n    const [hasLost, setHasLost] = useState<boolean>(false);\r\n    const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const handleMouseDown = (): void => {\r\n            setFace(Face.oh);\r\n        }\r\n\r\n        const handleMouseUp = (): void => {\r\n            setFace(Face.smile);\r\n        }\r\n\r\n        window.addEventListener('mousedown', handleMouseDown);\r\n        window.addEventListener('mouseup', handleMouseUp);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleMouseDown);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (live && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1)\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [live, time]);\r\n\r\n    useEffect(() => {\r\n        if (hasLost) {\r\n            setLive(false);\r\n            setFace(Face.lost);\r\n        }\r\n    }, [hasLost]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon) {\r\n            setLive(false);\r\n            setFace(Face.won);\r\n        }\r\n    }, [hasWon]);\r\n\r\n    const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n        if (hasLost) return;\r\n        \r\n        let newCells = cells.slice();\r\n\r\n        //start the game\r\n        if (!live) {\r\n            let isABomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n            while (isABomb) {\r\n                newCells = generateCells(config);\r\n                if (newCells[rowParam][colParam].value !== CellValue.bomb) {\r\n                    isABomb = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setLive(true);\r\n        }\r\n\r\n        const currentCell = newCells[rowParam][colParam];\r\n\r\n        if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n            return;\r\n        }\r\n\r\n        if (currentCell.value === CellValue.bomb) {\r\n            setHasLost(true);\r\n            newCells[rowParam][colParam].red = true;\r\n            newCells = showAllBombs();\r\n            setCells(newCells);\r\n            return;\r\n        } else if (currentCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam].state = CellState.visible;\r\n        }\r\n\r\n        // check to see if you won\r\n        let safeOpenCellsExists = false;\r\n        for (let row = 0; row < MAX_ROWS; row++) {\r\n            for (let col =0; col < MAX_COLS; col++) {\r\n                const currentCell = newCells[row][col];\r\n\r\n                if (currentCell.value !== CellValue.bomb && currentCell.state === CellState.open) {\r\n                    safeOpenCellsExists = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!safeOpenCellsExists) {\r\n            newCells = newCells.map(row => row.map(cell => {\r\n                if (cell.value === CellValue.bomb) {\r\n                    return {\r\n                        ...cell,\r\n                        state: CellState.flagged\r\n                    }\r\n                }\r\n                return cell;\r\n            }))\r\n            setHasWon(true);\r\n        }\r\n        \r\n        setCells(newCells);\r\n    }\r\n\r\n    const handleCellContext = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        e.preventDefault();\r\n\r\n        if (!live) {\r\n            return;\r\n        }\r\n\r\n        const currentCells = cells.slice();\r\n        const currentCell = cells[rowParam][colParam]\r\n\r\n        if (currentCell.state === CellState.visible) {\r\n            return;\r\n        } else if (currentCell.state === CellState.open) {\r\n            currentCells[rowParam][colParam].state =CellState.flagged;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter - 1);\r\n        } else if (currentCell.state === CellState.flagged) {\r\n            currentCells[rowParam][colParam].state =CellState.open;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter + 1);\r\n        }\r\n    }\r\n\r\n    const handleFaceClick = (): void => {\r\n        setLive(false);\r\n        setTime(0);\r\n        setCells(generateCells(config));\r\n        setHasLost(false);\r\n        setHasWon(false);\r\n        setBombCounter(NO_OF_BOMBS);\r\n    }\r\n\r\n    const renderCells = (): React.ReactNode => {\r\n        return cells.map((row, rowIndex) => row.map((cell, colIndex) => (\r\n            <Button \r\n                key={`${rowIndex} - ${colIndex}`} \r\n                state={cell.state}\r\n                value={cell.value}\r\n                onClick={handleCellClick}\r\n                onContext={handleCellContext}\r\n                red={cell.red}\r\n                row={rowIndex} \r\n                col={colIndex} />\r\n            ))\r\n        )\r\n    }\r\n\r\n    const showAllBombs = (): Cell[][] => {\r\n        const currentCells = cells.slice();\r\n        return currentCells.map(row => row.map(cell => {\r\n            if (cell.value === CellValue.bomb) {\r\n                return {\r\n                    ...cell,\r\n                    state: CellState.visible\r\n                }\r\n            }\r\n\r\n            return cell;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Header\">\r\n                <NumberDisplay value={bombCounter} />\r\n                <div className=\"Face\" onClick={handleFaceClick}>\r\n                    <span role=\"img\" aria-label=\"face\">\r\n                        {face}\r\n                    </span>\r\n                </div>\r\n                <NumberDisplay value={time} />\r\n            </div>\r\n            <div \r\n                className=\"Body\"\r\n                style={{\r\n                    gridTemplateColumns: `repeat(${MAX_COLS}, 1fr)`,\r\n                    gridTemplateRows: `repeat(${MAX_ROWS}, 1fr)`\r\n                    }}>\r\n                {renderCells()}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\n\r\nexport const ScorePage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <h1>ScorePage</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, NavLink} from 'react-router-dom';\r\nimport { useRoutes } from './useRoutes';\r\n\r\nconst App: React.FC = () => {\r\n    const routes = useRoutes(true);\r\n    return (\r\n        <>\r\n            <Router>\r\n            <nav className=\"nav\">\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"/game/easy\">Легко</a>\r\n                        {/* <NavLink to=\"/game/easy\">\r\n                            Easy\r\n                        </NavLink> */}\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"/game/medium\">Средне</a>\r\n                        {/* <NavLink to=\"/game/medium\">\r\n                            medium\r\n                        </NavLink> */}\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"/game/hard\">Сложно</a>\r\n                        {/* <NavLink to=\"/game/hard\">\r\n                            hard\r\n                        </NavLink> */}\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n                <div>\r\n                    {routes}\r\n                </div>\r\n            </Router>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport { GAME_CONFIG } from '../../constants';\r\nimport { AuthPage } from './AuthPage';\r\nimport Game from './Game';\r\nimport { ScorePage } from './ScorePage';\r\n\r\nexport const useRoutes = (isAuthenticated: boolean) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/game/easy\" exact>\r\n                    <Game config={GAME_CONFIG.easy} />\r\n                </Route>\r\n                <Route path=\"/game/medium\" exact>\r\n                    <Game config={GAME_CONFIG.medium} />\r\n                </Route>\r\n                <Route path=\"/game/hard\" exact>\r\n                    <Game config={GAME_CONFIG.hard} />\r\n                </Route>\r\n                <Route path=\"/score\" exact>\r\n                    <ScorePage />\r\n                </Route>\r\n            </Switch>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <AuthPage />\r\n            </Route>\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}