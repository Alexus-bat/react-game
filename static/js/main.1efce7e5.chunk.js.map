{"version":3,"sources":["assets/sound/click.mp3","assets/sound/lost.mp3","assets/sound/win.mp3","types/index.ts","components/NumberDisplay/NumberDisplay.tsx","utils/index.ts","components/Button/Button.tsx","utils/storage.ts","constants/index.ts","components/App/ModalScore.tsx","components/App/Game.tsx","components/App/Footer.tsx","components/App/App.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","MAX_COLS","MAX_ROWS","topLeftCell","topCell","topRightCell","leftCell","rightCell","bottomLeftCell","bottomCell","bottomRightCell","generateCells","NO_OF_BOMBS","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","visible","flagged","newCells","slice","Button","onContext","onClick","red","onContextMenu","role","aria-label","setStorage","name","localStorage","setItem","JSON","stringify","getStorage","parse","window","getItem","delStorage","removeItem","GAME_CONFIG","easy","medium","hard","ModalSCore","score","countWin","bestTime","clickUrl","require","lostUrl","winUrl","defScore","Game","useSound","clickSound","lostSound","winSound","useState","config","setConfig","key","setKey","setCells","smile","face","setFace","time","setTime","live","setLive","bombCounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","showWinTitle","setShowWinTitle","showLostTitle","setShowLostTitle","showScore","setShowScore","setScore","useEffect","handleMouseDown","oh","handleMouseUp","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","e","preventDefault","isABomb","includes","showAllBombs","safeOpenCellsExists","handleCellContext","currentCells","changeLevel","style","gridTemplateColumns","gridTemplateRows","bind","Footer","href","rel","target","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1efce7e5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/click.0920fcb3.mp3\";","export default __webpack_public_path__ + \"static/media/lost.4d1ccb21.mp3\";","export default __webpack_public_path__ + \"static/media/win.3d559ecb.mp3\";","export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb\r\n}\r\n\r\nexport enum CellState {\r\n    open,\r\n    visible,\r\n    flagged\r\n}\r\n\r\nexport type Cell = {value: CellValue, state: CellState, red?: boolean}\r\n\r\nexport enum Face {\r\n    smile = \"😁\",\r\n    oh = \"😮\",\r\n    lost = \"😵\",\r\n    won = \"😎\"\r\n}\r\n","import React from 'react';\r\nimport './NumberDisplay.scss';\r\n\r\ninterface NumberDisplayProps {\r\n    value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n    return <div className=\"NumberDisplay\">\r\n        {value < 0 ? `-${Math.abs(value).toString().padStart(2, '0')}` : value.toString().padStart(3, '0')}\r\n    </div>\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import {Cell, CellValue, CellState} from '../types/index';\r\n\r\nconst grabAllAdjacentCells = (cells: Cell[][], rowParam: number, colParam: number, MAX_COLS: number, MAX_ROWS: number): {\r\n    topLeftCell: Cell | null,\r\n    topCell: Cell | null,\r\n    topRightCell: Cell | null,\r\n    leftCell: Cell | null,\r\n    rightCell: Cell | null,\r\n    bottomLeftCell: Cell | null,\r\n    bottomCell: Cell | null,\r\n    bottomRightCell: Cell | null\r\n} => {\r\n    const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n    const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n    const topRightCell = rowParam > 0 && colParam < MAX_COLS - 1 ? cells[rowParam - 1][colParam + 1] : null;\r\n    const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n    const rightCell = colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n    const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0 ? cells[rowParam + 1][colParam - 1] : null;\r\n    const bottomCell = rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n    const bottomRightCell = rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1 ? cells[rowParam + 1][colParam + 1] : null;\r\n\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    }\r\n}\r\n\r\ntype configProp = {\r\n    MAX_ROWS: number;\r\n    MAX_COLS: number;\r\n    NO_OF_BOMBS: number;\r\n}\r\n\r\nexport const generateCells = ({MAX_COLS, MAX_ROWS, NO_OF_BOMBS}: configProp): Cell[][] => {\r\n    let cells: Cell[][] = [];\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.open\r\n            })\r\n        }\r\n    }\r\n\r\n    // randomly put 10 bombs\r\n    let bombsPlaced = 0;\r\n    while (bombsPlaced < NO_OF_BOMBS) {\r\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n\r\n        const currentCell = cells[randomRow][randomCol];\r\n        if (currentCell.value !== CellValue.bomb) {\r\n        cells = cells.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) => {\r\n            if (randomRow === rowIndex && randomCol === colIndex) {\r\n                return {\r\n                ...cell,\r\n                value: CellValue.bomb\r\n                };\r\n            }\r\n\r\n            return cell;\r\n            })\r\n        );\r\n        bombsPlaced++;\r\n        }\r\n    }\r\n\r\n    // calculate the numbers for each cell\r\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n            const currentCell = cells[rowIndex][colIndex];\r\n            if (currentCell.value === CellValue.bomb) {\r\n                continue;\r\n            }\r\n\r\n            let numberOfBombs = 0;\r\n            const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowIndex, colIndex, MAX_COLS, MAX_ROWS);\r\n\r\n            if (topLeftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topRightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (leftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (rightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomLeftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomRightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n\r\n            if (numberOfBombs > 0) {\r\n                cells[rowIndex][colIndex] = {\r\n                    ...currentCell,\r\n                    value: numberOfBombs\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return cells;\r\n}\r\n\r\nexport const openMultipleCells = (cells: Cell[][], rowParam: number, colParam: number, MAX_COLS: number, MAX_ROWS: number): Cell[][] => {\r\n    const currentCell = cells[rowParam][colParam];\r\n    \r\n    if (currentCell.state === CellState.visible || currentCell.state === CellState.flagged) {\r\n        return cells;\r\n    }\r\n    \r\n    let newCells = cells.slice();\r\n\r\n    newCells[rowParam][colParam].state = CellState.visible;\r\n    \r\n    const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowParam, colParam, MAX_COLS, MAX_ROWS);\r\n\r\n    if (topLeftCell?.state === CellState.open && topLeftCell.value !== CellValue.bomb) {\r\n        if (topLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n        if (topCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (topRightCell?.state === CellState.open && topRightCell.value !== CellValue.bomb) {\r\n        if (topRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n        if (leftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (rightCell?.state === CellState.open && rightCell.value !== CellValue.bomb) {\r\n        if (rightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (bottomLeftCell?.state === CellState.open && bottomLeftCell.value !== CellValue.bomb) {\r\n        if (bottomLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (bottomCell?.state === CellState.open && bottomCell.value !== CellValue.bomb) {\r\n        if (bottomCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam].state = CellState.visible;\r\n        }\r\n    }    \r\n\r\n    if (bottomRightCell?.state === CellState.open && bottomRightCell.value !== CellValue.bomb) {\r\n        if (bottomRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    return newCells;\r\n}\r\n","import React from 'react';\r\nimport {CellState, CellValue} from '../../types/index';\r\n\r\nimport './Button.scss';\r\n\r\ninterface ButtonProps {\r\n    onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    red?: boolean;\r\n    row: number;\r\n    col: number;\r\n    state: CellState;\r\n    value: CellValue;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ row, col, onContext, onClick, state, value, red }) => {\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state === CellState.visible) {\r\n            if (value === CellValue.bomb) {\r\n                return (\r\n                    <span role=\"img\" aria-label=\"bomb\">\r\n                        💣\r\n                    </span>\r\n                )\r\n            } else if (value === CellValue.none) {\r\n                return null;\r\n            }\r\n\r\n            return value;\r\n        } else if (state === CellState.flagged) {\r\n            return (\r\n                <span role=\"img\" aria-label=\"flag\">\r\n                    🚩\r\n                </span>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`Button ${state === CellState.visible ? \"visible\" : \"\"} value-${value} ${red ? \"red\" : \"\"}`}\r\n            onClick={onClick(row, col)}\r\n            onContextMenu={onContext(row, col)}>\r\n            {renderContent()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","const setStorage = (name: string, value: any): void => {\r\n    localStorage.setItem(name, JSON.stringify(value));\r\n}\r\n\r\nconst getStorage = (name: string): any => {\r\n    return JSON.parse(window.localStorage.getItem(name)!);\r\n} \r\n\r\nconst delStorage = (name: string): void => {\r\n    localStorage.removeItem(name);\r\n}\r\n\r\nexport {setStorage, getStorage, delStorage}\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n\r\nexport const GAME_CONFIG = {\r\n    easy: {\r\n        MAX_ROWS: 9,\r\n        MAX_COLS: 9,\r\n        NO_OF_BOMBS: 10\r\n    },\r\n    medium: {\r\n        MAX_ROWS: 16,\r\n        MAX_COLS: 16,\r\n        NO_OF_BOMBS: 40\r\n    },\r\n    hard: {\r\n        MAX_ROWS: 16,\r\n        MAX_COLS: 30,\r\n        NO_OF_BOMBS: 99\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ntype ScorePrors = {\r\n    score: {\r\n        easy: {\r\n            countWin: number,\r\n            bestTime: number | null\r\n        },\r\n        medium: {\r\n            countWin: number,\r\n            bestTime: number | null\r\n        },\r\n        hard: {\r\n            countWin: number,\r\n            bestTime: number | null\r\n        }\r\n    }\r\n}\r\n\r\nconst ModalSCore: React.FC<ScorePrors> = ({score}) => {\r\n    return (\r\n        <div className=\"ModalScore\">\r\n            <div className=\"title\">\r\n                Легко:\r\n                <span>{`Побед ${score.easy.countWin}`}</span>\r\n                <span>{`Лучшее время ${score.easy.bestTime === null ? '-' : score.easy.bestTime} сек`}</span>\r\n            </div>\r\n            <div className=\"title\">\r\n                Средне:\r\n                <span>{`Побед ${score.medium.countWin}`}</span>\r\n                <span>{`Лучшее время ${score.medium.bestTime === null ? '-' : score.medium.bestTime} сек`}</span>\r\n            </div>\r\n            <div className=\"title\">\r\n                Сложно:\r\n                <span>{`Побед ${score.hard.countWin}`}</span>\r\n                <span>{`Лучшее время ${score.hard.bestTime === null ? '-' : score.hard.bestTime} сек`}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalSCore;\r\n","import React, {useEffect, useState} from 'react';\r\nimport useSound from 'use-sound';\r\n\r\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\r\nimport {generateCells, openMultipleCells} from '../../utils/index'\r\nimport Button from '../Button/Button';\r\nimport {Cell, CellState, CellValue, Face} from '../../types/index';\r\n\r\nimport './App.scss';\r\nimport { delStorage, getStorage, setStorage } from '../../utils/storage';\r\nimport { GAME_CONFIG } from '../../constants';\r\nimport ModalSCore from './ModalScore';\r\n\r\nconst clickUrl = require('../../assets/sound/click.mp3');\r\nconst lostUrl = require('../../assets/sound/lost.mp3');\r\nconst winUrl = require('../../assets/sound/win.mp3');\r\n\r\ninterface scoreInterface {\r\n    easy: {\r\n        countWin: number,\r\n        bestTime: number | null\r\n    },\r\n    medium: {\r\n        countWin: number,\r\n        bestTime: number | null\r\n    },\r\n    hard: {\r\n        countWin: number,\r\n        bestTime: number | null\r\n    }\r\n}\r\n\r\nconst defScore: scoreInterface = {\r\n    easy: {\r\n        countWin: 0,\r\n        bestTime: null\r\n    },\r\n    medium: {\r\n        countWin: 0,\r\n        bestTime: null\r\n    },\r\n    hard: {\r\n        countWin: 0,\r\n        bestTime: null\r\n    }\r\n}\r\n\r\nconst Game: React.FC = () => {\r\n    const [clickSound] = useSound(clickUrl);\r\n    const [lostSound] = useSound(lostUrl);\r\n    const [winSound] = useSound(winUrl);\r\n    const [config, setConfig] = useState(getStorage('config') || GAME_CONFIG.easy)\r\n    const [key, setKey] = useState<string>(getStorage('key') || 'easy')\r\n    const [cells, setCells] = useState<Cell[][]>(getStorage('cells') || generateCells(config));\r\n    const [face, setFace] = useState<Face>(Face.smile);\r\n    const [time, setTime] = useState<number>(getStorage('time') || 0);\r\n    const [live, setLive] = useState<boolean>(false);\r\n    const [bombCounter, setBombCounter] = useState<number>(getStorage('bomb') || config.NO_OF_BOMBS);\r\n    const [hasLost, setHasLost] = useState<boolean>(false);\r\n    const [hasWon, setHasWon] = useState<boolean>(false);\r\n    const [showWinTitle, setShowWinTitle] = useState<boolean>(false);\r\n    const [showLostTitle, setShowLostTitle] = useState<boolean>(false);\r\n    const [showScore, setShowScore] = useState<boolean>(false);\r\n    const [score, setScore] = useState<scoreInterface>(getStorage('score') || defScore);\r\n\r\n    useEffect(() => {\r\n        if (live) {\r\n            setStorage('cells', cells);\r\n            setStorage('key', key);\r\n            setStorage('time', time);\r\n            setStorage('bomb', bombCounter);\r\n            setStorage('config', config)\r\n        }\r\n    }, [time, cells, bombCounter])\r\n\r\n    useEffect(() => {\r\n        const handleMouseDown = (): void => {\r\n            setFace(Face.oh);\r\n        }\r\n\r\n        const handleMouseUp = (): void => {\r\n            setFace(Face.smile);\r\n        }\r\n\r\n        window.addEventListener('mousedown', handleMouseDown);\r\n        window.addEventListener('mouseup', handleMouseUp);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleMouseDown);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (live && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1)\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [live, time]);\r\n\r\n    useEffect(() => {\r\n        if (hasLost) {\r\n            setShowLostTitle(true);\r\n            lostSound();\r\n            setLive(false);\r\n            setFace(Face.lost);\r\n            delStorage('cells');\r\n            delStorage('time');\r\n            delStorage('bomb');\r\n            delStorage('config');\r\n            delStorage('key');\r\n        }\r\n    }, [hasLost]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon) {\r\n            setShowWinTitle(true);\r\n            winSound();\r\n            setLive(false);\r\n            setFace(Face.won);\r\n            if (key === 'easy') {\r\n                score.easy.countWin++;\r\n                if (!score.easy.bestTime || time < score.easy.bestTime) {\r\n                    score.easy.bestTime = time;\r\n                }\r\n                setScore(score);\r\n                setStorage('score', score);\r\n            }\r\n            if (key === 'medium') {\r\n                score.medium.countWin++;\r\n                if (!score.medium.bestTime || time < score.medium.bestTime) {\r\n                    score.medium.bestTime = time;\r\n                }\r\n                setScore(score);\r\n                setStorage('score', score);\r\n            }\r\n            if (key === 'hard') {\r\n                score.hard.countWin++;\r\n                if (!score.hard.bestTime || time < score.hard.bestTime) {\r\n                    score.hard.bestTime = time;\r\n                }\r\n                setScore(score);\r\n                setStorage('score', score);\r\n            }\r\n        }\r\n    }, [hasWon]);\r\n\r\n    const handleCellClick = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        clickSound();\r\n        e.preventDefault();\r\n\r\n        if (hasLost) return;\r\n        \r\n        let newCells = cells.slice();\r\n\r\n        //start the game\r\n        if (!live) {\r\n            let isABomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n            while (isABomb) {\r\n                newCells = generateCells(config);\r\n                if (newCells[rowParam][colParam].value !== CellValue.bomb) {\r\n                    isABomb = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setLive(true);\r\n        }\r\n\r\n        const currentCell = newCells[rowParam][colParam];\r\n\r\n        if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n            return;\r\n        }\r\n\r\n        if (currentCell.value === CellValue.bomb) {\r\n            setHasLost(true);\r\n            newCells[rowParam][colParam].red = true;\r\n            newCells = showAllBombs();\r\n            setCells(newCells);\r\n            return;\r\n        } else if (currentCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam, config.MAX_COLS, config.MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam].state = CellState.visible;\r\n        }\r\n\r\n        // check to see if you won\r\n        let safeOpenCellsExists = false;\r\n        for (let row = 0; row < config.MAX_ROWS; row++) {\r\n            for (let col =0; col < config.MAX_COLS; col++) {\r\n                const currentCell = newCells[row][col];\r\n\r\n                if (currentCell.value !== CellValue.bomb && currentCell.state === CellState.open) {\r\n                    safeOpenCellsExists = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!safeOpenCellsExists) {\r\n            newCells = newCells.map(row => row.map(cell => {\r\n                if (cell.value === CellValue.bomb) {\r\n                    return {\r\n                        ...cell,\r\n                        state: CellState.flagged\r\n                    }\r\n                }\r\n                return cell;\r\n            }))\r\n            setHasWon(true);\r\n        }\r\n        \r\n        setCells(newCells);\r\n    }\r\n\r\n    const handleCellContext = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        e.preventDefault();\r\n\r\n        if (!live) {\r\n            return;\r\n        }\r\n\r\n        clickSound();\r\n\r\n        const currentCells = cells.slice();\r\n        const currentCell = cells[rowParam][colParam]\r\n\r\n        if (currentCell.state === CellState.visible) {\r\n            return;\r\n        } else if (currentCell.state === CellState.open) {\r\n            currentCells[rowParam][colParam].state =CellState.flagged;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter - 1);\r\n        } else if (currentCell.state === CellState.flagged) {\r\n            currentCells[rowParam][colParam].state =CellState.open;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter + 1);\r\n        }\r\n    }\r\n\r\n    const handleFaceClick = (): void => {\r\n        setShowLostTitle(false);\r\n        setShowWinTitle(false);\r\n        clickSound()\r\n        setLive(false);\r\n        setTime(0);\r\n        setCells(generateCells(config));\r\n        setHasLost(false);\r\n        setHasWon(false);\r\n        setBombCounter(config.NO_OF_BOMBS);\r\n    }\r\n\r\n    const renderCells = (): React.ReactNode => {\r\n        return cells.map((row, rowIndex) => row.map((cell, colIndex) => (\r\n            <Button \r\n                key={`${rowIndex} - ${colIndex}`} \r\n                state={cell.state}\r\n                value={cell.value}\r\n                onClick={handleCellClick}\r\n                onContext={handleCellContext}\r\n                red={cell.red}\r\n                row={rowIndex} \r\n                col={colIndex} />\r\n            ))\r\n        )\r\n    }\r\n\r\n    const showAllBombs = (): Cell[][] => {\r\n        const currentCells = cells.slice();\r\n        return currentCells.map(row => row.map(cell => {\r\n            if (cell.value === CellValue.bomb) {\r\n                return {\r\n                    ...cell,\r\n                    state: CellState.visible\r\n                }\r\n            }\r\n\r\n            return cell;\r\n        }))\r\n    }\r\n\r\n    const changeLevel = (key: string): void => {        \r\n        setShowLostTitle(false);\r\n        setShowWinTitle(false);\r\n        clickSound();\r\n        setLive(false);\r\n        setTime(0);\r\n        delStorage('cells');\r\n        delStorage('time');\r\n        delStorage('bomb');\r\n        switch (key) {\r\n            case 'easy': setConfig(GAME_CONFIG.easy);\r\n                        setCells(generateCells(GAME_CONFIG.easy));\r\n                        setBombCounter(GAME_CONFIG.easy.NO_OF_BOMBS);\r\n                        setKey('easy');\r\n                        break;\r\n            case 'medium': setConfig(GAME_CONFIG.medium);\r\n                        setCells(generateCells(GAME_CONFIG.medium));\r\n                        setBombCounter(GAME_CONFIG.medium.NO_OF_BOMBS)\r\n                        setKey('medium');\r\n                        break;\r\n            case 'hard': setConfig(GAME_CONFIG.hard);\r\n                        setCells(generateCells(GAME_CONFIG.hard));\r\n                        setBombCounter(GAME_CONFIG.hard.NO_OF_BOMBS)\r\n                        setKey('hard');\r\n                        break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <button \r\n            className=\"btn\"\r\n            onClick={() => {\r\n                setShowScore(!showScore);\r\n            }}>\r\n                Статистика\r\n            </button>\r\n            {showScore && <ModalSCore score={score} />}\r\n            <div className=\"Header\">\r\n                <NumberDisplay value={bombCounter} />\r\n                <div className=\"Face\" onClick={handleFaceClick}>\r\n                    <span role=\"img\" aria-label=\"face\">\r\n                        {face}\r\n                    </span>\r\n                </div>\r\n                <NumberDisplay value={time} />\r\n            </div>\r\n            <div \r\n                className=\"Body\"\r\n                style={{\r\n                    gridTemplateColumns: `repeat(${config.MAX_COLS}, 1fr)`,\r\n                    gridTemplateRows: `repeat(${config.MAX_ROWS}, 1fr)`\r\n                    }}>\r\n                {renderCells()}\r\n            </div>\r\n            <div className=\"App__footer\">\r\n                <div \r\n                    className={`btn-lvl ${(key === 'easy') && 'active'}`}\r\n                    onClick={changeLevel.bind(null, 'easy')}>\r\n                    легко</div>\r\n                <div \r\n                    className={`btn-lvl ${(key === 'medium') && 'active'}`}\r\n                    onClick={changeLevel.bind(null, 'medium')}>\r\n                        средне</div>\r\n                <div \r\n                    className={`btn-lvl ${(key === 'hard') && 'active'}`}\r\n                    onClick={changeLevel.bind(null, 'hard')}>\r\n                        сложно</div>\r\n            </div>\r\n            {showWinTitle && (<div className=\"win-title\">\r\n                <span>Win!!!</span>\r\n                <span>Click on Face to play more</span>\r\n            </div>)}\r\n            {showLostTitle && (<div className=\"lost-title\">\r\n                <span>Loss((</span>\r\n                <span>Click on Face to try again</span>\r\n            </div>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Game;\r\n","/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport React from 'react';\r\nimport './Footer.scss';\r\n\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <>\r\n            <footer className=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                            <a className=\"footer-logo\" href=\"https://rs.school/js/\" rel=\"noreferrer\" target=\"_blank\"></a>\r\n                        © 2021 <a href=\"https://github.com/Alexus-bat\" rel=\"noreferrer\" target=\"_blank\">Created by @Alexus-bat</a>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Game from './Game';\r\nimport Footer from './Footer';\r\n// import { useRoutes } from './useRoutes';\r\n\r\nconst App: React.FC = () => {\r\n    // const routes = useRoutes(true);\r\n    return (\r\n        // <>\r\n        //     <nav className=\"nav\">\r\n        //         <ul>\r\n        //             <li>\r\n        //                 {/* <a href=\"/game/easy\">Легко</a> */}\r\n        //                 <NavLink to={{pathname: '/game/easy', }}>\r\n        //                     легко\r\n        //                 </NavLink>\r\n        //             </li>\r\n        //             <li>\r\n        //                 {/* <a href=\"/game/medium\">Средне</a> */}\r\n        //                 <NavLink to=\"/game/medium\">\r\n        //                     средне\r\n        //                 </NavLink>\r\n        //             </li>\r\n        //             <li>\r\n        //                 {/* <a href=\"/game/hard\">Сложно</a> */}\r\n        //                 <NavLink to=\"/game/hard\">\r\n        //                     сложно\r\n        //                 </NavLink>\r\n        //             </li>\r\n        //         </ul>\r\n        //     </nav>\r\n        //     <div>\r\n        //         {routes}\r\n        //     </div>\r\n        // </>\r\n        <>\r\n            <Game />\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}