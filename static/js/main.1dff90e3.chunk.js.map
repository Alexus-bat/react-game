{"version":3,"sources":["types/index.ts","constants/index.ts","components/App/Footer.tsx","components/NumberDisplay/NumberDisplay.tsx","utils/index.ts","components/Button/Button.tsx","utils/storage.ts","components/App/Game.tsx","components/App/ScorePage.tsx","components/App/App.tsx","components/App/useRoutes.tsx","index.tsx"],"names":["CellValue","CellState","Face","GAME_CONFIG","easy","MAX_ROWS","MAX_COLS","NO_OF_BOMBS","medium","hard","Footer","className","href","rel","target","NumberDisplay","value","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","leftCell","rightCell","bottomLeftCell","bottomCell","bottomRightCell","generateCells","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","visible","flagged","newCells","slice","Button","onContext","onClick","red","onContextMenu","role","aria-label","setStorage","name","localStorage","setItem","JSON","stringify","Game","config","useState","setCells","smile","face","setFace","time","setTime","live","setLive","bombCounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","handleMouseDown","oh","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","e","preventDefault","isABomb","includes","showAllBombs","safeOpenCellsExists","handleCellContext","currentCells","style","gridTemplateColumns","gridTemplateRows","ScorePage","App","routes","isAuthenticated","path","exact","to","useRoutes","pathname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dff90e3.chunk.js","sourcesContent":["export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb\r\n}\r\n\r\nexport enum CellState {\r\n    open,\r\n    visible,\r\n    flagged\r\n}\r\n\r\nexport type Cell = {value: CellValue, state: CellState, red?: boolean}\r\n\r\nexport enum Face {\r\n    smile = \"😁\",\r\n    oh = \"😮\",\r\n    lost = \"😵\",\r\n    won = \"😎\"\r\n}\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n\r\nexport const GAME_CONFIG = {\r\n    easy: {\r\n        MAX_ROWS: 9,\r\n        MAX_COLS: 9,\r\n        NO_OF_BOMBS: 10\r\n    },\r\n    medium: {\r\n        MAX_ROWS: 16,\r\n        MAX_COLS: 16,\r\n        NO_OF_BOMBS: 40\r\n    },\r\n    hard: {\r\n        MAX_ROWS: 16,\r\n        MAX_COLS: 30,\r\n        NO_OF_BOMBS: 99\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Footer.scss';\r\n\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <>\r\n            <footer className=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                            <a className=\"footer-logo\" href=\"https://rs.school/js/\" rel=\"noreferrer\" target=\"_blank\"></a>\r\n                        © 2021 <a href=\"https://github.com/Alexus-bat\" rel=\"noreferrer\" target=\"_blank\">Created by @Alexus-bat</a>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './NumberDisplay.scss';\r\n\r\ninterface NumberDisplayProps {\r\n    value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n    return <div className=\"NumberDisplay\">\r\n        {value < 0 ? `-${Math.abs(value).toString().padStart(2, '0')}` : value.toString().padStart(3, '0')}\r\n    </div>\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import {Cell, CellValue, CellState} from '../types/index';\r\n\r\nconst grabAllAdjacentCells = (cells: Cell[][], rowParam: number, colParam: number, MAX_COLS: number, MAX_ROWS: number): {\r\n    topLeftCell: Cell | null,\r\n    topCell: Cell | null,\r\n    topRightCell: Cell | null,\r\n    leftCell: Cell | null,\r\n    rightCell: Cell | null,\r\n    bottomLeftCell: Cell | null,\r\n    bottomCell: Cell | null,\r\n    bottomRightCell: Cell | null\r\n} => {\r\n    const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n    const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n    const topRightCell = rowParam > 0 && colParam < MAX_COLS - 1 ? cells[rowParam - 1][colParam + 1] : null;\r\n    const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n    const rightCell = colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n    const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0 ? cells[rowParam + 1][colParam - 1] : null;\r\n    const bottomCell = rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n    const bottomRightCell = rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1 ? cells[rowParam + 1][colParam + 1] : null;\r\n\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    }\r\n}\r\n\r\ntype configProp = {\r\n    MAX_ROWS: number;\r\n    MAX_COLS: number;\r\n    NO_OF_BOMBS: number;\r\n}\r\n\r\nexport const generateCells = ({MAX_COLS, MAX_ROWS, NO_OF_BOMBS}: configProp): Cell[][] => {\r\n    let cells: Cell[][] = [];\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.open\r\n            })\r\n        }\r\n    }\r\n\r\n    // randomly put 10 bombs\r\n    let bombsPlaced = 0;\r\n    while (bombsPlaced < NO_OF_BOMBS) {\r\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n        const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n\r\n        const currentCell = cells[randomRow][randomCol];\r\n        if (currentCell.value !== CellValue.bomb) {\r\n        cells = cells.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) => {\r\n            if (randomRow === rowIndex && randomCol === colIndex) {\r\n                return {\r\n                ...cell,\r\n                value: CellValue.bomb\r\n                };\r\n            }\r\n\r\n            return cell;\r\n            })\r\n        );\r\n        bombsPlaced++;\r\n        }\r\n    }\r\n\r\n    // calculate the numbers for each cell\r\n    for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n        for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n            const currentCell = cells[rowIndex][colIndex];\r\n            if (currentCell.value === CellValue.bomb) {\r\n                continue;\r\n            }\r\n\r\n            let numberOfBombs = 0;\r\n            const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowIndex, colIndex, MAX_COLS, MAX_ROWS);\r\n\r\n            if (topLeftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (topRightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (leftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (rightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomLeftCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n            if (bottomRightCell?.value === CellValue.bomb) {\r\n                numberOfBombs++;\r\n            }\r\n\r\n            if (numberOfBombs > 0) {\r\n                cells[rowIndex][colIndex] = {\r\n                    ...currentCell,\r\n                    value: numberOfBombs\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return cells;\r\n}\r\n\r\nexport const openMultipleCells = (cells: Cell[][], rowParam: number, colParam: number, MAX_COLS: number, MAX_ROWS: number): Cell[][] => {\r\n    const currentCell = cells[rowParam][colParam];\r\n    \r\n    if (currentCell.state === CellState.visible || currentCell.state === CellState.flagged) {\r\n        return cells;\r\n    }\r\n    \r\n    let newCells = cells.slice();\r\n\r\n    newCells[rowParam][colParam].state = CellState.visible;\r\n    \r\n    const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowParam, colParam, MAX_COLS, MAX_ROWS);\r\n\r\n    if (topLeftCell?.state === CellState.open && topLeftCell.value !== CellValue.bomb) {\r\n        if (topLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n        if (topCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (topRightCell?.state === CellState.open && topRightCell.value !== CellValue.bomb) {\r\n        if (topRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam - 1][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n        if (leftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (rightCell?.state === CellState.open && rightCell.value !== CellValue.bomb) {\r\n        if (rightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (bottomLeftCell?.state === CellState.open && bottomLeftCell.value !== CellValue.bomb) {\r\n        if (bottomLeftCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam - 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    if (bottomCell?.state === CellState.open && bottomCell.value !== CellValue.bomb) {\r\n        if (bottomCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam].state = CellState.visible;\r\n        }\r\n    }    \r\n\r\n    if (bottomRightCell?.state === CellState.open && bottomRightCell.value !== CellValue.bomb) {\r\n        if (bottomRightCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam + 1][colParam + 1].state = CellState.visible;\r\n        }\r\n    }\r\n\r\n    return newCells;\r\n}\r\n","import React from 'react';\r\nimport {CellState, CellValue} from '../../types/index';\r\n\r\nimport './Button.scss';\r\n\r\ninterface ButtonProps {\r\n    onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n    red?: boolean;\r\n    row: number;\r\n    col: number;\r\n    state: CellState;\r\n    value: CellValue;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ row, col, onContext, onClick, state, value, red }) => {\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state === CellState.visible) {\r\n            if (value === CellValue.bomb) {\r\n                return (\r\n                    <span role=\"img\" aria-label=\"bomb\">\r\n                        💣\r\n                    </span>\r\n                )\r\n            } else if (value === CellValue.none) {\r\n                return null;\r\n            }\r\n\r\n            return value;\r\n        } else if (state === CellState.flagged) {\r\n            return (\r\n                <span role=\"img\" aria-label=\"flag\">\r\n                    🚩\r\n                </span>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`Button ${state === CellState.visible ? \"visible\" : \"\"} value-${value} ${red ? \"red\" : \"\"}`}\r\n            onClick={onClick(row, col)}\r\n            onContextMenu={onContext(row, col)}>\r\n            {renderContent()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","const setStorage = (name: string, value: any): void => {\r\n    localStorage.setItem(name, JSON.stringify(value));\r\n}\r\n\r\nconst getStorage = (name: string): any => {\r\n    return JSON.parse(window.localStorage.getItem(name)!);\r\n} \r\n\r\nconst delStorage = (name: string): void => {\r\n    localStorage.removeItem(name);\r\n}\r\n\r\nexport {setStorage, getStorage, delStorage}\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\r\nimport {generateCells, openMultipleCells} from '../../utils/index'\r\nimport Button from '../Button/Button';\r\nimport {Cell, CellState, CellValue, Face} from '../../types/index';\r\n\r\nimport './App.scss';\r\nimport { delStorage, getStorage, setStorage } from '../../utils/storage';\r\n\r\ninterface GameConfigProps {\r\n    config: {\r\n        MAX_ROWS: number;\r\n        MAX_COLS: number;\r\n        NO_OF_BOMBS: number;\r\n    },\r\n    name: string\r\n}\r\n\r\nconst Game: React.FC<GameConfigProps> = ({config, name}) => {\r\n    const {MAX_COLS, MAX_ROWS, NO_OF_BOMBS} = config;\r\n    const [cells, setCells] = useState<Cell[][]>(generateCells(config));\r\n    const [face, setFace] = useState<Face>(Face.smile);\r\n    const [time, setTime] = useState<number>(0);\r\n    const [live, setLive] = useState<boolean>(false);\r\n    const [bombCounter, setBombCounter] = useState<number>(NO_OF_BOMBS);\r\n    const [hasLost, setHasLost] = useState<boolean>(false);\r\n    const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n    // useEffect(() => {\r\n    //     delStorage('cells')\r\n    // }, [key])\r\n\r\n    useEffect(() => {\r\n        setCells(generateCells(config));\r\n        setTime(0);\r\n        setLive(false);\r\n        setBombCounter(config.NO_OF_BOMBS);\r\n        setHasLost(false);\r\n        setHasWon(false);\r\n    }, [config])\r\n\r\n    // useEffect(() => {\r\n    //     if (!live) {\r\n    //         delStorage('cells');\r\n    //         console.log('qu')\r\n    //     }\r\n    // }, [live])\r\n\r\n\r\n    useEffect(() => {\r\n        const handleMouseDown = (): void => {\r\n            setFace(Face.oh);\r\n        }\r\n\r\n        const handleMouseUp = (): void => {\r\n            setFace(Face.smile);\r\n        }\r\n\r\n        window.addEventListener('mousedown', handleMouseDown);\r\n        window.addEventListener('mouseup', handleMouseUp);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleMouseDown);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (live && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1)\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [live, time]);\r\n\r\n    useEffect(() => {\r\n        if (hasLost) {\r\n            setLive(false);\r\n            setFace(Face.lost);\r\n        }\r\n    }, [hasLost]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon) {\r\n            setLive(false);\r\n            setFace(Face.won);\r\n        }\r\n    }, [hasWon]);\r\n\r\n    useEffect(() => {\r\n        // console.log('change')\r\n        if (live) {\r\n            setStorage('cells', cells);\r\n            setStorage('time', time);\r\n            setStorage('name', name);\r\n        }\r\n    }, [time, cells])\r\n\r\n    const handleCellClick = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        e.preventDefault();\r\n\r\n        if (hasLost) return;\r\n        \r\n        let newCells = cells.slice();\r\n\r\n        //start the game\r\n        if (!live) {\r\n            let isABomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n            while (isABomb) {\r\n                newCells = generateCells(config);\r\n                if (newCells[rowParam][colParam].value !== CellValue.bomb) {\r\n                    isABomb = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setLive(true);\r\n        }\r\n\r\n        const currentCell = newCells[rowParam][colParam];\r\n\r\n        if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n            return;\r\n        }\r\n\r\n        if (currentCell.value === CellValue.bomb) {\r\n            setHasLost(true);\r\n            newCells[rowParam][colParam].red = true;\r\n            newCells = showAllBombs();\r\n            setCells(newCells);\r\n            return;\r\n        } else if (currentCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam, MAX_COLS, MAX_ROWS);\r\n        } else {\r\n            newCells[rowParam][colParam].state = CellState.visible;\r\n        }\r\n\r\n        // check to see if you won\r\n        let safeOpenCellsExists = false;\r\n        for (let row = 0; row < MAX_ROWS; row++) {\r\n            for (let col =0; col < MAX_COLS; col++) {\r\n                const currentCell = newCells[row][col];\r\n\r\n                if (currentCell.value !== CellValue.bomb && currentCell.state === CellState.open) {\r\n                    safeOpenCellsExists = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!safeOpenCellsExists) {\r\n            newCells = newCells.map(row => row.map(cell => {\r\n                if (cell.value === CellValue.bomb) {\r\n                    return {\r\n                        ...cell,\r\n                        state: CellState.flagged\r\n                    }\r\n                }\r\n                return cell;\r\n            }))\r\n            setHasWon(true);\r\n        }\r\n        \r\n        setCells(newCells);\r\n    }\r\n\r\n    const handleCellContext = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        e.preventDefault();\r\n\r\n        if (!live) {\r\n            return;\r\n        }\r\n\r\n        const currentCells = cells.slice();\r\n        const currentCell = cells[rowParam][colParam]\r\n\r\n        if (currentCell.state === CellState.visible) {\r\n            return;\r\n        } else if (currentCell.state === CellState.open) {\r\n            currentCells[rowParam][colParam].state =CellState.flagged;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter - 1);\r\n        } else if (currentCell.state === CellState.flagged) {\r\n            currentCells[rowParam][colParam].state =CellState.open;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter + 1);\r\n        }\r\n    }\r\n\r\n    const handleFaceClick = (): void => {\r\n        setLive(false);\r\n        setTime(0);\r\n        setCells(generateCells(config));\r\n        setHasLost(false);\r\n        setHasWon(false);\r\n        setBombCounter(NO_OF_BOMBS);\r\n    }\r\n\r\n    const renderCells = (): React.ReactNode => {\r\n        return cells.map((row, rowIndex) => row.map((cell, colIndex) => (\r\n            <Button \r\n                key={`${rowIndex} - ${colIndex}`} \r\n                state={cell.state}\r\n                value={cell.value}\r\n                onClick={handleCellClick}\r\n                onContext={handleCellContext}\r\n                red={cell.red}\r\n                row={rowIndex} \r\n                col={colIndex} />\r\n            ))\r\n        )\r\n    }\r\n\r\n    const showAllBombs = (): Cell[][] => {\r\n        const currentCells = cells.slice();\r\n        return currentCells.map(row => row.map(cell => {\r\n            if (cell.value === CellValue.bomb) {\r\n                return {\r\n                    ...cell,\r\n                    state: CellState.visible\r\n                }\r\n            }\r\n\r\n            return cell;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Header\">\r\n                <NumberDisplay value={bombCounter} />\r\n                <div className=\"Face\" onClick={handleFaceClick}>\r\n                    <span role=\"img\" aria-label=\"face\">\r\n                        {face}\r\n                    </span>\r\n                </div>\r\n                <NumberDisplay value={time} />\r\n            </div>\r\n            <div \r\n                className=\"Body\"\r\n                style={{\r\n                    gridTemplateColumns: `repeat(${MAX_COLS}, 1fr)`,\r\n                    gridTemplateRows: `repeat(${MAX_ROWS}, 1fr)`\r\n                    }}>\r\n                {renderCells()}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\n\r\nexport const ScorePage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <h1>ScorePage</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { useRoutes } from './useRoutes';\r\n\r\nconst App: React.FC = () => {\r\n    const routes = useRoutes(true);\r\n    return (\r\n        <>\r\n            <nav className=\"nav\">\r\n                <ul>\r\n                    <li>\r\n                        {/* <a href=\"/game/easy\">Легко</a> */}\r\n                        <NavLink to={{pathname: '/game/easy', }}>\r\n                            легко\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        {/* <a href=\"/game/medium\">Средне</a> */}\r\n                        <NavLink to=\"/game/medium\">\r\n                            средне\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        {/* <a href=\"/game/hard\">Сложно</a> */}\r\n                        <NavLink to=\"/game/hard\">\r\n                            сложно\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            <div>\r\n                {routes}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport { GAME_CONFIG } from '../../constants';\r\nimport Footer from './Footer';\r\nimport Game from './Game';\r\nimport { ScorePage } from './ScorePage';\r\n\r\nexport const useRoutes = (isAuthenticated: boolean) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <>\r\n            <Switch>\r\n                <Route path=\"/game/easy\" exact>\r\n                    <Game config={GAME_CONFIG.easy} name=\"easy\" />\r\n                </Route>\r\n                <Route path=\"/game/medium\" exact>\r\n                    <Game config={GAME_CONFIG.medium} name=\"medium\" />\r\n                </Route>\r\n                <Route path=\"/game/hard\" exact>\r\n                    <Game config={GAME_CONFIG.hard} name=\"hard\" />\r\n                </Route>\r\n                <Route path=\"/score\" exact>\r\n                    <ScorePage />\r\n                </Route>\r\n                <Redirect to=\"/game/easy\"></Redirect>\r\n            </Switch>\r\n            <Footer />\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}